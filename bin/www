#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('speech-ai-bot:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* socket connection & message transmission */

const io = require('../node_modules/socket.io').listen(server);
// require('../node_modules/dotenv').config();

const APIAI_TOKEN = process.env.APIAI_TOKEN;
const APIAI_SESSION_ID = process.env.APIAI_SESSION_ID;

const apiai = require('../node_modules/apiai')(APIAI_TOKEN);

io.on('connection', function (socket) {
    console.log('A user connected');
});

io.on('connection',function (socket) {
    socket.on('input message',function (text) {
        console.log('You: ' + text);

        var apiairequest = apiai.textRequest(text, {
           sessionId: APIAI_SESSION_ID
        });

        apiairequest.on('response',function (response) {
            var aiText = response.result.fulfillment.speech;
            console.log('Bot: ' + aiText);
            socket.emit('output message',aiText);
        });
        
        apiairequest.on('error',function (e) {
            console.log('Response error: ' + e);
        });

        apiairequest.end();
    });
});

/* socket connection & message transmission */
